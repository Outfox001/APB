
// ---------------------------------------------------------------------------------------------------------------------
// Module name: afvip_hw_registers
// HDL        : System Verilog
// Author     : Autogenerated by python registers tool
// Description: The hw_registers is an automatically generated module. This module is a wrapper over all
//               registers instances and its main task is to decode APB requests and modify/read registers.
//              The registers are described in the hw_registers.xlsx.
//              The module is limited for APB on 32 bits
// Date       : 25 May, 2023
// ---------------------------------------------------------------------------------------------------------------------
`timescale 1ns/1ps
module afvip_hw_registers #(
  parameter TP             = 1                 , // Time Propagation
  parameter APB_ADDR_WIDTH = 16                , // APB Address width
  parameter BASE_ADDR      = 16'h8000            // APB Base address
)(
// System and Control Interface
  input                       clk                            , // Clock
  input                       rst_n                          , // Asynchronous Reset - Active low

// RW registers fields
  output [               2:0] cfg_instr_op_code              , // Operation code: -- 3'd0 : reg[dst] = reg[rs0] + imm -- 3'd1 : reg[dst] = reg[rs0] * imm -- 3'd2 : reg[dst] = reg[rs0] + reg[rs1] -- 3'd3 : reg[dst] = reg[rs0] * reg[rs1] -- 3'd4 : reg [dst] = reg[rs0] * reg[rs1] + imm -- Other configuration will rise an error interrupt
  output [               4:0] cfg_instr_reg_rs0              , // Address for source register 0
  output [               4:0] cfg_instr_reg_rs1              , // Address for source register 1
  output [               4:0] cfg_instr_reg_dst              , // Address for destination register
  output [               7:0] cfg_instr_imm                  , // Immediate


// RWA registers fields
  output [               0:0] ev_intr_clr_err                , // Clear error interrupt
  output [               0:0] ev_intr_clr_finish             , // Event Filed 1 of register2
  output [               0:0] ev_ctrl_start                  , // Instruction start


// RWS registers fields
  output [              31:0] work_reg00                     , // Reg00
  input  [              31:0] ip_wdata_work_reg00            , // Reg00
  input  [               0:0] ip_we_work_reg00              , // Reg00
  output [              31:0] work_reg01                     , // Reg01
  input  [              31:0] ip_wdata_work_reg01            , // Reg01
  input  [               0:0] ip_we_work_reg01              , // Reg01
  output [              31:0] work_reg02                     , // Reg02
  input  [              31:0] ip_wdata_work_reg02            , // Reg02
  input  [               0:0] ip_we_work_reg02              , // Reg02
  output [              31:0] work_reg03                     , // Reg03
  input  [              31:0] ip_wdata_work_reg03            , // Reg03
  input  [               0:0] ip_we_work_reg03              , // Reg03
  output [              31:0] work_reg04                     , // Reg04
  input  [              31:0] ip_wdata_work_reg04            , // Reg04
  input  [               0:0] ip_we_work_reg04              , // Reg04
  output [              31:0] work_reg05                     , // Reg05
  input  [              31:0] ip_wdata_work_reg05            , // Reg05
  input  [               0:0] ip_we_work_reg05              , // Reg05
  output [              31:0] work_reg06                     , // Reg06
  input  [              31:0] ip_wdata_work_reg06            , // Reg06
  input  [               0:0] ip_we_work_reg06              , // Reg06
  output [              31:0] work_reg07                     , // Reg07
  input  [              31:0] ip_wdata_work_reg07            , // Reg07
  input  [               0:0] ip_we_work_reg07              , // Reg07
  output [              31:0] work_reg08                     , // Reg08
  input  [              31:0] ip_wdata_work_reg08            , // Reg08
  input  [               0:0] ip_we_work_reg08              , // Reg08
  output [              31:0] work_reg09                     , // Reg09
  input  [              31:0] ip_wdata_work_reg09            , // Reg09
  input  [               0:0] ip_we_work_reg09              , // Reg09
  output [              31:0] work_reg0A                     , // Reg10
  input  [              31:0] ip_wdata_work_reg0A            , // Reg10
  input  [               0:0] ip_we_work_reg0A              , // Reg10
  output [              31:0] work_reg0B                     , // Reg11
  input  [              31:0] ip_wdata_work_reg0B            , // Reg11
  input  [               0:0] ip_we_work_reg0B              , // Reg11
  output [              31:0] work_reg0C                     , // Reg12
  input  [              31:0] ip_wdata_work_reg0C            , // Reg12
  input  [               0:0] ip_we_work_reg0C              , // Reg12
  output [              31:0] work_reg0D                     , // Reg13
  input  [              31:0] ip_wdata_work_reg0D            , // Reg13
  input  [               0:0] ip_we_work_reg0D              , // Reg13
  output [              31:0] work_reg0E                     , // Reg14
  input  [              31:0] ip_wdata_work_reg0E            , // Reg14
  input  [               0:0] ip_we_work_reg0E              , // Reg14
  output [              31:0] work_reg0F                     , // Reg15
  input  [              31:0] ip_wdata_work_reg0F            , // Reg15
  input  [               0:0] ip_we_work_reg0F              , // Reg15
  output [              31:0] work_reg10                     , // Reg16
  input  [              31:0] ip_wdata_work_reg10            , // Reg16
  input  [               0:0] ip_we_work_reg10              , // Reg16
  output [              31:0] work_reg11                     , // Reg17
  input  [              31:0] ip_wdata_work_reg11            , // Reg17
  input  [               0:0] ip_we_work_reg11              , // Reg17
  output [              31:0] work_reg12                     , // Reg18
  input  [              31:0] ip_wdata_work_reg12            , // Reg18
  input  [               0:0] ip_we_work_reg12              , // Reg18
  output [              31:0] work_reg13                     , // Reg19
  input  [              31:0] ip_wdata_work_reg13            , // Reg19
  input  [               0:0] ip_we_work_reg13              , // Reg19
  output [              31:0] work_reg14                     , // Reg20
  input  [              31:0] ip_wdata_work_reg14            , // Reg20
  input  [               0:0] ip_we_work_reg14              , // Reg20
  output [              31:0] work_reg15                     , // Reg21
  input  [              31:0] ip_wdata_work_reg15            , // Reg21
  input  [               0:0] ip_we_work_reg15              , // Reg21
  output [              31:0] work_reg16                     , // Reg22
  input  [              31:0] ip_wdata_work_reg16            , // Reg22
  input  [               0:0] ip_we_work_reg16              , // Reg22
  output [              31:0] work_reg17                     , // Reg23
  input  [              31:0] ip_wdata_work_reg17            , // Reg23
  input  [               0:0] ip_we_work_reg17              , // Reg23
  output [              31:0] work_reg18                     , // Reg24
  input  [              31:0] ip_wdata_work_reg18            , // Reg24
  input  [               0:0] ip_we_work_reg18              , // Reg24
  output [              31:0] work_reg19                     , // Reg25
  input  [              31:0] ip_wdata_work_reg19            , // Reg25
  input  [               0:0] ip_we_work_reg19              , // Reg25
  output [              31:0] work_reg1A                     , // Reg26
  input  [              31:0] ip_wdata_work_reg1A            , // Reg26
  input  [               0:0] ip_we_work_reg1A              , // Reg26
  output [              31:0] work_reg1B                     , // Reg27
  input  [              31:0] ip_wdata_work_reg1B            , // Reg27
  input  [               0:0] ip_we_work_reg1B              , // Reg27
  output [              31:0] work_reg1C                     , // Reg28
  input  [              31:0] ip_wdata_work_reg1C            , // Reg28
  input  [               0:0] ip_we_work_reg1C              , // Reg28
  output [              31:0] work_reg1D                     , // Reg29
  input  [              31:0] ip_wdata_work_reg1D            , // Reg29
  input  [               0:0] ip_we_work_reg1D              , // Reg29
  output [              31:0] work_reg1E                     , // Reg30
  input  [              31:0] ip_wdata_work_reg1E            , // Reg30
  input  [               0:0] ip_we_work_reg1E              , // Reg30
  output [              31:0] work_reg1F                     , // Reg31
  input  [              31:0] ip_wdata_work_reg1F            , // Reg31
  input  [               0:0] ip_we_work_reg1F              , // Reg31


// RO registers fields
  input  [               0:0] sts_intr_error_cfg             , // Error interrupt
  input  [               0:0] sts_intr_finish_op             , // Finish interrupt


// APB Interface
  input                       psel                           , // Select.         PSELx indicates that the Completer is selected and that a data transfer is required.
  input                       penable                        , // Enable.         PENABLE indicates the second and subsequent cycles of an APB transfer.
  input  [APB_ADDR_WIDTH-1:0] paddr                          , // Address.        PADDR is the APB address bus.
  input                       pwrite                         , // Direction.      PWRITE indicates an APB write access when HIGH and an APB read access when LOW
  input                [31:0] pwdata                         , // Write data.     The PWDATA write data bus is driven by the APB bridge Requester during write cycles when PWRITE is HIGH.
  output                      pready                         , // Ready.          PREADY is used to extend an APB transfer by the Completer.
  output reg           [31:0] prdata                         , // Read data.      The PRDATA read data bus is driven by the selected Completer during read cycles when PWRITE is LOW.
  output reg                  pslverr                          // Transfer error. PSLVERR is an optional signal that can be asserted HIGH by the Completer to indicate an error condition on an APB transfer
);

// Local Parameters ----------------------------------------------------------------------------------------------------
localparam APB_ADDR_CFG_INSTR                           = BASE_ADDR + 16'h80  ;
localparam APB_ADDR_STS_INTR                            = BASE_ADDR + 16'h84  ;
localparam APB_ADDR_EV_INTR_CLR                         = BASE_ADDR + 16'h88  ;
localparam APB_ADDR_EV_CTRL                             = BASE_ADDR + 16'h8c  ;
localparam APB_ADDR_WORK_REG00                          = BASE_ADDR + 16'h0   ;
localparam APB_ADDR_WORK_REG01                          = BASE_ADDR + 16'h4   ;
localparam APB_ADDR_WORK_REG02                          = BASE_ADDR + 16'h8   ;
localparam APB_ADDR_WORK_REG03                          = BASE_ADDR + 16'hc   ;
localparam APB_ADDR_WORK_REG04                          = BASE_ADDR + 16'h10  ;
localparam APB_ADDR_WORK_REG05                          = BASE_ADDR + 16'h14  ;
localparam APB_ADDR_WORK_REG06                          = BASE_ADDR + 16'h18  ;
localparam APB_ADDR_WORK_REG07                          = BASE_ADDR + 16'h1c  ;
localparam APB_ADDR_WORK_REG08                          = BASE_ADDR + 16'h20  ;
localparam APB_ADDR_WORK_REG09                          = BASE_ADDR + 16'h24  ;
localparam APB_ADDR_WORK_REG0A                          = BASE_ADDR + 16'h28  ;
localparam APB_ADDR_WORK_REG0B                          = BASE_ADDR + 16'h2c  ;
localparam APB_ADDR_WORK_REG0C                          = BASE_ADDR + 16'h30  ;
localparam APB_ADDR_WORK_REG0D                          = BASE_ADDR + 16'h34  ;
localparam APB_ADDR_WORK_REG0E                          = BASE_ADDR + 16'h38  ;
localparam APB_ADDR_WORK_REG0F                          = BASE_ADDR + 16'h3c  ;
localparam APB_ADDR_WORK_REG10                          = BASE_ADDR + 16'h40  ;
localparam APB_ADDR_WORK_REG11                          = BASE_ADDR + 16'h44  ;
localparam APB_ADDR_WORK_REG12                          = BASE_ADDR + 16'h48  ;
localparam APB_ADDR_WORK_REG13                          = BASE_ADDR + 16'h4c  ;
localparam APB_ADDR_WORK_REG14                          = BASE_ADDR + 16'h50  ;
localparam APB_ADDR_WORK_REG15                          = BASE_ADDR + 16'h54  ;
localparam APB_ADDR_WORK_REG16                          = BASE_ADDR + 16'h58  ;
localparam APB_ADDR_WORK_REG17                          = BASE_ADDR + 16'h5c  ;
localparam APB_ADDR_WORK_REG18                          = BASE_ADDR + 16'h60  ;
localparam APB_ADDR_WORK_REG19                          = BASE_ADDR + 16'h64  ;
localparam APB_ADDR_WORK_REG1A                          = BASE_ADDR + 16'h68  ;
localparam APB_ADDR_WORK_REG1B                          = BASE_ADDR + 16'h6c  ;
localparam APB_ADDR_WORK_REG1C                          = BASE_ADDR + 16'h70  ;
localparam APB_ADDR_WORK_REG1D                          = BASE_ADDR + 16'h74  ;
localparam APB_ADDR_WORK_REG1E                          = BASE_ADDR + 16'h78  ;
localparam APB_ADDR_WORK_REG1F                          = BASE_ADDR + 16'h7c  ;

localparam RST_VAL_CFG_INSTR_OP_CODE                    = 3'h0    ;
localparam RST_VAL_CFG_INSTR_REG_RS0                    = 5'h0    ;
localparam RST_VAL_CFG_INSTR_REG_RS1                    = 5'h0    ;
localparam RST_VAL_CFG_INSTR_REG_DST                    = 5'h0    ;
localparam RST_VAL_CFG_INSTR_IMM                        = 8'h0    ;
localparam RST_VAL_EV_INTR_CLR_ERR                      = 1'h0    ;
localparam RST_VAL_EV_INTR_CLR_FINISH                   = 1'h0    ;
localparam RST_VAL_EV_CTRL_START                        = 1'h0    ;
localparam RST_VAL_WORK_REG00                           = 32'h0   ;
localparam RST_VAL_WORK_REG01                           = 32'h0   ;
localparam RST_VAL_WORK_REG02                           = 32'h0   ;
localparam RST_VAL_WORK_REG03                           = 32'h0   ;
localparam RST_VAL_WORK_REG04                           = 32'h0   ;
localparam RST_VAL_WORK_REG05                           = 32'h0   ;
localparam RST_VAL_WORK_REG06                           = 32'h0   ;
localparam RST_VAL_WORK_REG07                           = 32'h0   ;
localparam RST_VAL_WORK_REG08                           = 32'h0   ;
localparam RST_VAL_WORK_REG09                           = 32'h0   ;
localparam RST_VAL_WORK_REG0A                           = 32'h0   ;
localparam RST_VAL_WORK_REG0B                           = 32'h0   ;
localparam RST_VAL_WORK_REG0C                           = 32'h0   ;
localparam RST_VAL_WORK_REG0D                           = 32'h0   ;
localparam RST_VAL_WORK_REG0E                           = 32'h0   ;
localparam RST_VAL_WORK_REG0F                           = 32'h0   ;
localparam RST_VAL_WORK_REG10                           = 32'h0   ;
localparam RST_VAL_WORK_REG11                           = 32'h0   ;
localparam RST_VAL_WORK_REG12                           = 32'h0   ;
localparam RST_VAL_WORK_REG13                           = 32'h0   ;
localparam RST_VAL_WORK_REG14                           = 32'h0   ;
localparam RST_VAL_WORK_REG15                           = 32'h0   ;
localparam RST_VAL_WORK_REG16                           = 32'h0   ;
localparam RST_VAL_WORK_REG17                           = 32'h0   ;
localparam RST_VAL_WORK_REG18                           = 32'h0   ;
localparam RST_VAL_WORK_REG19                           = 32'h0   ;
localparam RST_VAL_WORK_REG1A                           = 32'h0   ;
localparam RST_VAL_WORK_REG1B                           = 32'h0   ;
localparam RST_VAL_WORK_REG1C                           = 32'h0   ;
localparam RST_VAL_WORK_REG1D                           = 32'h0   ;
localparam RST_VAL_WORK_REG1E                           = 32'h0   ;
localparam RST_VAL_WORK_REG1F                           = 32'h0   ;

// Internal Signals ----------------------------------------------------------------------------------------------------
wire         write_access                           ; // Indicates APB write access
wire [31:0]  read_data                              ; // Combinational read data
wire         set_error                              ; // Set Error flag
wire         try_write_access                       ; // Indicates that a write access is the next operation
wire         try_read_access                        ; // Indicates that a read access is the next operation
wire         try_misaligned_access                  ; // Indicates that a misaligned access is the next operation
wire         read_addr_decoded                      ; // Indicates that a read address was decoded
wire         write_addr_decoded                     ; // Indicates that a write address was decoded


wire         am_cfg_instr                           ; // Indicates if address match for the register: cfg_instr
wire         am_sts_intr                            ; // Indicates if address match for the register: sts_intr
wire         am_ev_intr_clr                         ; // Indicates if address match for the register: ev_intr_clr
wire         am_ev_ctrl                             ; // Indicates if address match for the register: ev_ctrl
wire         am_work_reg00                          ; // Indicates if address match for the register: work_reg00
wire         am_work_reg01                          ; // Indicates if address match for the register: work_reg01
wire         am_work_reg02                          ; // Indicates if address match for the register: work_reg02
wire         am_work_reg03                          ; // Indicates if address match for the register: work_reg03
wire         am_work_reg04                          ; // Indicates if address match for the register: work_reg04
wire         am_work_reg05                          ; // Indicates if address match for the register: work_reg05
wire         am_work_reg06                          ; // Indicates if address match for the register: work_reg06
wire         am_work_reg07                          ; // Indicates if address match for the register: work_reg07
wire         am_work_reg08                          ; // Indicates if address match for the register: work_reg08
wire         am_work_reg09                          ; // Indicates if address match for the register: work_reg09
wire         am_work_reg0A                          ; // Indicates if address match for the register: work_reg0A
wire         am_work_reg0B                          ; // Indicates if address match for the register: work_reg0B
wire         am_work_reg0C                          ; // Indicates if address match for the register: work_reg0C
wire         am_work_reg0D                          ; // Indicates if address match for the register: work_reg0D
wire         am_work_reg0E                          ; // Indicates if address match for the register: work_reg0E
wire         am_work_reg0F                          ; // Indicates if address match for the register: work_reg0F
wire         am_work_reg10                          ; // Indicates if address match for the register: work_reg10
wire         am_work_reg11                          ; // Indicates if address match for the register: work_reg11
wire         am_work_reg12                          ; // Indicates if address match for the register: work_reg12
wire         am_work_reg13                          ; // Indicates if address match for the register: work_reg13
wire         am_work_reg14                          ; // Indicates if address match for the register: work_reg14
wire         am_work_reg15                          ; // Indicates if address match for the register: work_reg15
wire         am_work_reg16                          ; // Indicates if address match for the register: work_reg16
wire         am_work_reg17                          ; // Indicates if address match for the register: work_reg17
wire         am_work_reg18                          ; // Indicates if address match for the register: work_reg18
wire         am_work_reg19                          ; // Indicates if address match for the register: work_reg19
wire         am_work_reg1A                          ; // Indicates if address match for the register: work_reg1A
wire         am_work_reg1B                          ; // Indicates if address match for the register: work_reg1B
wire         am_work_reg1C                          ; // Indicates if address match for the register: work_reg1C
wire         am_work_reg1D                          ; // Indicates if address match for the register: work_reg1D
wire         am_work_reg1E                          ; // Indicates if address match for the register: work_reg1E
wire         am_work_reg1F                          ; // Indicates if address match for the register: work_reg1F

wire         we_cfg_instr                           ; // Write enable for register cfg_instr
wire         we_ev_intr_clr                         ; // Write enable for register ev_intr_clr
wire         we_ev_ctrl                             ; // Write enable for register ev_ctrl
wire         we_work_reg00                          ; // Write enable for register work_reg00
wire         we_work_reg01                          ; // Write enable for register work_reg01
wire         we_work_reg02                          ; // Write enable for register work_reg02
wire         we_work_reg03                          ; // Write enable for register work_reg03
wire         we_work_reg04                          ; // Write enable for register work_reg04
wire         we_work_reg05                          ; // Write enable for register work_reg05
wire         we_work_reg06                          ; // Write enable for register work_reg06
wire         we_work_reg07                          ; // Write enable for register work_reg07
wire         we_work_reg08                          ; // Write enable for register work_reg08
wire         we_work_reg09                          ; // Write enable for register work_reg09
wire         we_work_reg0A                          ; // Write enable for register work_reg0A
wire         we_work_reg0B                          ; // Write enable for register work_reg0B
wire         we_work_reg0C                          ; // Write enable for register work_reg0C
wire         we_work_reg0D                          ; // Write enable for register work_reg0D
wire         we_work_reg0E                          ; // Write enable for register work_reg0E
wire         we_work_reg0F                          ; // Write enable for register work_reg0F
wire         we_work_reg10                          ; // Write enable for register work_reg10
wire         we_work_reg11                          ; // Write enable for register work_reg11
wire         we_work_reg12                          ; // Write enable for register work_reg12
wire         we_work_reg13                          ; // Write enable for register work_reg13
wire         we_work_reg14                          ; // Write enable for register work_reg14
wire         we_work_reg15                          ; // Write enable for register work_reg15
wire         we_work_reg16                          ; // Write enable for register work_reg16
wire         we_work_reg17                          ; // Write enable for register work_reg17
wire         we_work_reg18                          ; // Write enable for register work_reg18
wire         we_work_reg19                          ; // Write enable for register work_reg19
wire         we_work_reg1A                          ; // Write enable for register work_reg1A
wire         we_work_reg1B                          ; // Write enable for register work_reg1B
wire         we_work_reg1C                          ; // Write enable for register work_reg1C
wire         we_work_reg1D                          ; // Write enable for register work_reg1D
wire         we_work_reg1E                          ; // Write enable for register work_reg1E
wire         we_work_reg1F                          ; // Write enable for register work_reg1F

wire  [ 2:0] wdata_cfg_instr_op_code                ; // Write data for register cfg_instr_op_code
wire  [ 4:0] wdata_cfg_instr_reg_rs0                ; // Write data for register cfg_instr_reg_rs0
wire  [ 4:0] wdata_cfg_instr_reg_rs1                ; // Write data for register cfg_instr_reg_rs1
wire  [ 4:0] wdata_cfg_instr_reg_dst                ; // Write data for register cfg_instr_reg_dst
wire  [ 7:0] wdata_cfg_instr_imm                    ; // Write data for register cfg_instr_imm
wire  [ 0:0] wdata_ev_intr_clr_err                  ; // Write data for register ev_intr_clr_err
wire  [ 0:0] wdata_ev_intr_clr_finish               ; // Write data for register ev_intr_clr_finish
wire  [ 0:0] wdata_ev_ctrl_start                    ; // Write data for register ev_ctrl_start
wire  [31:0] wdata_work_reg00                       ; // Write data for register work_reg00
wire  [31:0] wdata_work_reg01                       ; // Write data for register work_reg01
wire  [31:0] wdata_work_reg02                       ; // Write data for register work_reg02
wire  [31:0] wdata_work_reg03                       ; // Write data for register work_reg03
wire  [31:0] wdata_work_reg04                       ; // Write data for register work_reg04
wire  [31:0] wdata_work_reg05                       ; // Write data for register work_reg05
wire  [31:0] wdata_work_reg06                       ; // Write data for register work_reg06
wire  [31:0] wdata_work_reg07                       ; // Write data for register work_reg07
wire  [31:0] wdata_work_reg08                       ; // Write data for register work_reg08
wire  [31:0] wdata_work_reg09                       ; // Write data for register work_reg09
wire  [31:0] wdata_work_reg0A                       ; // Write data for register work_reg0A
wire  [31:0] wdata_work_reg0B                       ; // Write data for register work_reg0B
wire  [31:0] wdata_work_reg0C                       ; // Write data for register work_reg0C
wire  [31:0] wdata_work_reg0D                       ; // Write data for register work_reg0D
wire  [31:0] wdata_work_reg0E                       ; // Write data for register work_reg0E
wire  [31:0] wdata_work_reg0F                       ; // Write data for register work_reg0F
wire  [31:0] wdata_work_reg10                       ; // Write data for register work_reg10
wire  [31:0] wdata_work_reg11                       ; // Write data for register work_reg11
wire  [31:0] wdata_work_reg12                       ; // Write data for register work_reg12
wire  [31:0] wdata_work_reg13                       ; // Write data for register work_reg13
wire  [31:0] wdata_work_reg14                       ; // Write data for register work_reg14
wire  [31:0] wdata_work_reg15                       ; // Write data for register work_reg15
wire  [31:0] wdata_work_reg16                       ; // Write data for register work_reg16
wire  [31:0] wdata_work_reg17                       ; // Write data for register work_reg17
wire  [31:0] wdata_work_reg18                       ; // Write data for register work_reg18
wire  [31:0] wdata_work_reg19                       ; // Write data for register work_reg19
wire  [31:0] wdata_work_reg1A                       ; // Write data for register work_reg1A
wire  [31:0] wdata_work_reg1B                       ; // Write data for register work_reg1B
wire  [31:0] wdata_work_reg1C                       ; // Write data for register work_reg1C
wire  [31:0] wdata_work_reg1D                       ; // Write data for register work_reg1D
wire  [31:0] wdata_work_reg1E                       ; // Write data for register work_reg1E
wire  [31:0] wdata_work_reg1F                       ; // Write data for register work_reg1F

// Code ----------------------------------------------------------------------------------------------------------------
// Write enable design
assign pready                     = 1'b1 ;
assign write_access               = psel & penable & pwrite ;

//assign read_addr_decoded  = (1'd0|am_cfg_instr|am_sts_intr|am_ev_ctrl|am_work_reg00|am_work_reg01|am_work_reg02|am_work_reg03|am_work_reg04|am_work_reg05|am_work_reg06|am_work_reg07|am_work_reg08|am_work_reg09|am_work_reg0A|am_work_reg0B|am_work_reg0C|am_work_reg0D|am_work_reg0E|am_work_reg0F|am_work_reg10|am_work_reg11|am_work_reg12|am_work_reg13|am_work_reg14|am_work_reg15|am_work_reg16|am_work_reg17|am_work_reg18|am_work_reg19|am_work_reg1A|am_work_reg1B|am_work_reg1C|am_work_reg1D|am_work_reg1E|am_work_reg1F);
//assign write_addr_decoded = (1'd0|am_cfg_instr|am_ev_intr_clr|am_ev_ctrl|am_work_reg00|am_work_reg01|am_work_reg02|am_work_reg03|am_work_reg04|am_work_reg05|am_work_reg06|am_work_reg07|am_work_reg08|am_work_reg09|am_work_reg0A|am_work_reg0B|am_work_reg0C|am_work_reg0D|am_work_reg0E|am_work_reg0F|am_work_reg10|am_work_reg11|am_work_reg12|am_work_reg13|am_work_reg14|am_work_reg15|am_work_reg16|am_work_reg17|am_work_reg18|am_work_reg19|am_work_reg1A|am_work_reg1B|am_work_reg1C|am_work_reg1E|am_work_reg1F);

assign read_addr_decoded  = (1'd0|am_cfg_instr|am_sts_intr|am_ev_intr_clr|am_ev_ctrl|am_work_reg00|am_work_reg01|am_work_reg02|am_work_reg03|am_work_reg04|am_work_reg05|am_work_reg06|am_work_reg07|am_work_reg08|am_work_reg09|am_work_reg0A|am_work_reg0B|am_work_reg0C|am_work_reg0D|am_work_reg0E|am_work_reg0F|am_work_reg10|am_work_reg11|am_work_reg12|am_work_reg13|am_work_reg14|am_work_reg15|am_work_reg16|am_work_reg17|am_work_reg18|am_work_reg19|am_work_reg1A|am_work_reg1B|am_work_reg1C|am_work_reg1D|am_work_reg1E|am_work_reg1F);
assign write_addr_decoded = (1'd0|am_cfg_instr|am_ev_intr_clr|am_ev_ctrl|am_work_reg00|am_work_reg01|am_work_reg02|am_work_reg03|am_work_reg04|am_work_reg05|am_work_reg06|am_work_reg07|am_work_reg08|am_work_reg09|am_work_reg0A|am_work_reg0B|am_work_reg0C|am_work_reg0D|am_work_reg0E|am_work_reg0F|am_work_reg10|am_work_reg11|am_work_reg12|am_work_reg13|am_work_reg14|am_work_reg15|am_work_reg16|am_work_reg17|am_work_reg18|am_work_reg19|am_work_reg1A|am_work_reg1B|am_work_reg1C|am_work_reg1D|am_work_reg1E|am_work_reg1F);

assign am_cfg_instr               = (paddr == APB_ADDR_CFG_INSTR           ); // Indicates if address match cfg_instr               register
assign am_sts_intr                = (paddr == APB_ADDR_STS_INTR            ); // Indicates if address match sts_intr                register
assign am_ev_intr_clr             = (paddr == APB_ADDR_EV_INTR_CLR         ); // Indicates if address match ev_intr_clr             register
assign am_ev_ctrl                 = (paddr == APB_ADDR_EV_CTRL             ); // Indicates if address match ev_ctrl                 register
assign am_work_reg00              = (paddr == APB_ADDR_WORK_REG00          ); // Indicates if address match work_reg00              register
assign am_work_reg01              = (paddr == APB_ADDR_WORK_REG01          ); // Indicates if address match work_reg01              register
assign am_work_reg02              = (paddr == APB_ADDR_WORK_REG02          ); // Indicates if address match work_reg02              register
assign am_work_reg03              = (paddr == APB_ADDR_WORK_REG03          ); // Indicates if address match work_reg03              register
assign am_work_reg04              = (paddr == APB_ADDR_WORK_REG04          ); // Indicates if address match work_reg04              register
assign am_work_reg05              = (paddr == APB_ADDR_WORK_REG05          ); // Indicates if address match work_reg05              register
assign am_work_reg06              = (paddr == APB_ADDR_WORK_REG06          ); // Indicates if address match work_reg06              register
assign am_work_reg07              = (paddr == APB_ADDR_WORK_REG07          ); // Indicates if address match work_reg07              register
assign am_work_reg08              = (paddr == APB_ADDR_WORK_REG08          ); // Indicates if address match work_reg08              register
assign am_work_reg09              = (paddr == APB_ADDR_WORK_REG09          ); // Indicates if address match work_reg09              register
assign am_work_reg0A              = (paddr == APB_ADDR_WORK_REG0A          ); // Indicates if address match work_reg0A              register
assign am_work_reg0B              = (paddr == APB_ADDR_WORK_REG0B          ); // Indicates if address match work_reg0B              register
assign am_work_reg0C              = (paddr == APB_ADDR_WORK_REG0C          ); // Indicates if address match work_reg0C              register
assign am_work_reg0D              = (paddr == APB_ADDR_WORK_REG0D          ); // Indicates if address match work_reg0D              register
assign am_work_reg0E              = (paddr == APB_ADDR_WORK_REG0E          ); // Indicates if address match work_reg0E              register
assign am_work_reg0F              = (paddr == APB_ADDR_WORK_REG0F          ); // Indicates if address match work_reg0F              register
assign am_work_reg10              = (paddr == APB_ADDR_WORK_REG10          ); // Indicates if address match work_reg10              register
assign am_work_reg11              = (paddr == APB_ADDR_WORK_REG11          ); // Indicates if address match work_reg11              register
assign am_work_reg12              = (paddr == APB_ADDR_WORK_REG12          ); // Indicates if address match work_reg12              register
assign am_work_reg13              = (paddr == APB_ADDR_WORK_REG13          ); // Indicates if address match work_reg13              register
assign am_work_reg14              = (paddr == APB_ADDR_WORK_REG14          ); // Indicates if address match work_reg14              register
assign am_work_reg15              = (paddr == APB_ADDR_WORK_REG15          ); // Indicates if address match work_reg15              register
assign am_work_reg16              = (paddr == APB_ADDR_WORK_REG16          ); // Indicates if address match work_reg16              register
assign am_work_reg17              = (paddr == APB_ADDR_WORK_REG17          ); // Indicates if address match work_reg17              register
assign am_work_reg18              = (paddr == APB_ADDR_WORK_REG18          ); // Indicates if address match work_reg18              register
assign am_work_reg19              = (paddr == APB_ADDR_WORK_REG19          ); // Indicates if address match work_reg19              register
assign am_work_reg1A              = (paddr == APB_ADDR_WORK_REG1A          ); // Indicates if address match work_reg1A              register
assign am_work_reg1B              = (paddr == APB_ADDR_WORK_REG1B          ); // Indicates if address match work_reg1B              register
assign am_work_reg1C              = (paddr == APB_ADDR_WORK_REG1C          ); // Indicates if address match work_reg1C              register
assign am_work_reg1D              = (paddr == APB_ADDR_WORK_REG1D          ); // Indicates if address match work_reg1D              register
assign am_work_reg1E              = (paddr == APB_ADDR_WORK_REG1E          ); // Indicates if address match work_reg1E              register
assign am_work_reg1F              = (paddr == APB_ADDR_WORK_REG1F          ); // Indicates if address match work_reg1F              register

assign we_cfg_instr               = write_access & am_cfg_instr              ; // Write condition for register cfg_instr
assign we_ev_intr_clr             = write_access & am_ev_intr_clr            ; // Write condition for register ev_intr_clr
assign we_ev_ctrl                 = write_access & am_ev_ctrl                ; // Write condition for register ev_ctrl
assign we_work_reg00              = write_access & am_work_reg00             ; // Write condition for register work_reg00
assign we_work_reg01              = write_access & am_work_reg01             ; // Write condition for register work_reg01
assign we_work_reg02              = write_access & am_work_reg02             ; // Write condition for register work_reg02
assign we_work_reg03              = write_access & am_work_reg03             ; // Write condition for register work_reg03
assign we_work_reg04              = write_access & am_work_reg04             ; // Write condition for register work_reg04
assign we_work_reg05              = write_access & am_work_reg05             ; // Write condition for register work_reg05
assign we_work_reg06              = write_access & am_work_reg06             ; // Write condition for register work_reg06
assign we_work_reg07              = write_access & am_work_reg07             ; // Write condition for register work_reg07
assign we_work_reg08              = write_access & am_work_reg08             ; // Write condition for register work_reg08
assign we_work_reg09              = write_access & am_work_reg09             ; // Write condition for register work_reg09
assign we_work_reg0A              = write_access & am_work_reg0A             ; // Write condition for register work_reg0A
assign we_work_reg0B              = write_access & am_work_reg0B             ; // Write condition for register work_reg0B
assign we_work_reg0C              = write_access & am_work_reg0C             ; // Write condition for register work_reg0C
assign we_work_reg0D              = write_access & am_work_reg0D             ; // Write condition for register work_reg0D
assign we_work_reg0E              = write_access & am_work_reg0E             ; // Write condition for register work_reg0E
assign we_work_reg0F              = write_access & am_work_reg0F             ; // Write condition for register work_reg0F
assign we_work_reg10              = write_access & am_work_reg10             ; // Write condition for register work_reg10
assign we_work_reg11              = write_access & am_work_reg11             ; // Write condition for register work_reg11
assign we_work_reg12              = write_access & am_work_reg12             ; // Write condition for register work_reg12
assign we_work_reg13              = write_access & am_work_reg13             ; // Write condition for register work_reg13
assign we_work_reg14              = write_access & am_work_reg14             ; // Write condition for register work_reg14
assign we_work_reg15              = write_access & am_work_reg15             ; // Write condition for register work_reg15
assign we_work_reg16              = write_access & am_work_reg16             ; // Write condition for register work_reg16
assign we_work_reg17              = write_access & am_work_reg17             ; // Write condition for register work_reg17
assign we_work_reg18              = write_access & am_work_reg18             ; // Write condition for register work_reg18
assign we_work_reg19              = write_access & am_work_reg19             ; // Write condition for register work_reg19
assign we_work_reg1A              = write_access & am_work_reg1A             ; // Write condition for register work_reg1A
assign we_work_reg1B              = write_access & am_work_reg1B             ; // Write condition for register work_reg1B
assign we_work_reg1C              = write_access & am_work_reg1C             ; // Write condition for register work_reg1C
assign we_work_reg1D              = write_access & am_work_reg1D             ; // Write condition for register work_reg1D
assign we_work_reg1E              = write_access & am_work_reg1E             ; // Write condition for register work_reg1E
assign we_work_reg1F              = write_access & am_work_reg1F             ; // Write condition for register work_reg1F

// Write data selection for each field
assign wdata_cfg_instr_op_code    = pwdata[ 2: 0]; // offset :  0; width :  3
assign wdata_cfg_instr_reg_rs0    = pwdata[ 7: 3]; // offset :  3; width :  5
assign wdata_cfg_instr_reg_rs1    = pwdata[12: 8]; // offset :  8; width :  5
assign wdata_cfg_instr_reg_dst    = pwdata[20:16]; // offset : 16; width :  5
assign wdata_cfg_instr_imm        = pwdata[31:24]; // offset : 24; width :  8
assign wdata_ev_intr_clr_err      = pwdata[ 0: 0]; // offset :  0; width :  1
assign wdata_ev_intr_clr_finish   = pwdata[ 1: 1]; // offset :  1; width :  1
assign wdata_ev_ctrl_start        = pwdata[ 0: 0]; // offset :  0; width :  1
assign wdata_work_reg00           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg01           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg02           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg03           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg04           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg05           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg06           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg07           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg08           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg09           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0A           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0B           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0C           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0D           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0E           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg0F           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg10           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg11           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg12           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg13           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg14           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg15           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg16           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg17           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg18           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg19           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1A           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1B           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1C           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1D           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1E           = pwdata[31: 0]; // offset :  0; width : 32
assign wdata_work_reg1F           = pwdata[31: 0]; // offset :  0; width : 32

// Read data design
assign read_data = (32'd0
                 | ({32{am_cfg_instr              }} & {cfg_instr_imm, 3'b0, cfg_instr_reg_dst, 3'b0, cfg_instr_reg_rs1, cfg_instr_reg_rs0, cfg_instr_op_code})
                 | ({32{am_sts_intr               }} & {30'b0, sts_intr_finish_op, sts_intr_error_cfg})
                 | ({32{am_ev_intr_clr            }} & {30'b0, ev_intr_clr_finish, ev_intr_clr_err})
                 | ({32{am_ev_ctrl                }} & {31'b0, ev_ctrl_start})
                 | ({32{am_work_reg00             }} & {work_reg00})
                 | ({32{am_work_reg01             }} & {work_reg01})
                 | ({32{am_work_reg02             }} & {work_reg02})
                 | ({32{am_work_reg03             }} & {work_reg03})
                 | ({32{am_work_reg04             }} & {work_reg04})
                 | ({32{am_work_reg05             }} & {work_reg05})
                 | ({32{am_work_reg06             }} & {work_reg06})
                 | ({32{am_work_reg07             }} & {work_reg07})
                 | ({32{am_work_reg08             }} & {work_reg08})
                 | ({32{am_work_reg09             }} & {work_reg09})
                 | ({32{am_work_reg0A             }} & {work_reg0A})
                 | ({32{am_work_reg0B             }} & {work_reg0B})
                 | ({32{am_work_reg0C             }} & {work_reg0C})
                 | ({32{am_work_reg0D             }} & {work_reg0D})
                 | ({32{am_work_reg0E             }} & {work_reg0E})
                 | ({32{am_work_reg0F             }} & {work_reg0F})
                 | ({32{am_work_reg10             }} & {work_reg10})
                 | ({32{am_work_reg11             }} & {work_reg11})
                 | ({32{am_work_reg12             }} & {work_reg12})
                 | ({32{am_work_reg13             }} & {work_reg13})
                 | ({32{am_work_reg14             }} & {work_reg14})
                 | ({32{am_work_reg15             }} & {work_reg15})
                 | ({32{am_work_reg16             }} & {work_reg16})
                 | ({32{am_work_reg17             }} & {work_reg17})
                 | ({32{am_work_reg18             }} & {work_reg18})
                 | ({32{am_work_reg19             }} & {work_reg19})
                 | ({32{am_work_reg1A             }} & {work_reg1A})
                 | ({32{am_work_reg1B             }} & {work_reg1B})
                 | ({32{am_work_reg1C             }} & {work_reg1C})
                 | ({32{am_work_reg1D             }} & {work_reg1D})
                 | ({32{am_work_reg1E             }} & {work_reg1E})
                 | ({32{am_work_reg1F             }} & {work_reg1F})
);
always @(posedge clk or negedge rst_n)
if(~rst_n)                        prdata <= #TP 32'd0    ; else // HW Reset (Asynchronous)
if(psel & (!penable) & (!pwrite)) prdata <= #TP read_data;      // Load Combinational data

// Error design
assign try_write_access        = psel & (~penable) &   pwrite     ;
assign try_read_access         = psel & (~penable) & (~pwrite)    ;
assign try_misaligned_access   = psel & (~penable) & (|paddr[1:0]);

assign set_error = (try_write_access & (~write_addr_decoded))|
                   (try_read_access  & (~read_addr_decoded ))|
                    try_misaligned_access                    ;

always @(posedge clk or negedge rst_n)
if(~rst_n)    pslverr <= #TP 1'd0; else // HW Reset (Asynchronous)
if(set_error) pslverr <= #TP 1'd1; else // Set
if(pslverr)   pslverr <= #TP 1'd0;      // Reset after 1 cycle

// Instances for Configuration registers--------------------------------------------------------------------------------

rw_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (3                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_CFG_INSTR_OP_CODE                   )  // [P] Reset Value
)rw_field_cfg_instr_op_code                     (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_cfg_instr                                ), // [I] Write enable
// Data
  .d          (wdata_cfg_instr_op_code                     ), // [I] Input data
  .q          (cfg_instr_op_code                           )  // [O] Output data
);

rw_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (5                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_CFG_INSTR_REG_RS0                   )  // [P] Reset Value
)rw_field_cfg_instr_reg_rs0                     (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_cfg_instr                                ), // [I] Write enable
// Data
  .d          (wdata_cfg_instr_reg_rs0                     ), // [I] Input data
  .q          (cfg_instr_reg_rs0                           )  // [O] Output data
);

rw_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (5                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_CFG_INSTR_REG_RS1                   )  // [P] Reset Value
)rw_field_cfg_instr_reg_rs1                     (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_cfg_instr                                ), // [I] Write enable
// Data
  .d          (wdata_cfg_instr_reg_rs1                     ), // [I] Input data
  .q          (cfg_instr_reg_rs1                           )  // [O] Output data
);

rw_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (5                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_CFG_INSTR_REG_DST                   )  // [P] Reset Value
)rw_field_cfg_instr_reg_dst                     (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_cfg_instr                                ), // [I] Write enable
// Data
  .d          (wdata_cfg_instr_reg_dst                     ), // [I] Input data
  .q          (cfg_instr_reg_dst                           )  // [O] Output data
);

rw_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (8                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_CFG_INSTR_IMM                       )  // [P] Reset Value
)rw_field_cfg_instr_imm                         (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_cfg_instr                                ), // [I] Write enable
// Data
  .d          (wdata_cfg_instr_imm                         ), // [I] Input data
  .q          (cfg_instr_imm                               )  // [O] Output data
);

// Instances for Events registers---------------------------------------------------------------------------------------

rwa_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (1                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_EV_INTR_CLR_ERR                     )  // [P] Reset Value
)rwa_field_ev_intr_clr_err                       (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_ev_intr_clr                              ), // [I] Write enable
// Data
  .d          (wdata_ev_intr_clr_err                       ), // [I] Input data
  .q          (ev_intr_clr_err                             )  // [O] Output data
);

rwa_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (1                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_EV_INTR_CLR_FINISH                  )  // [P] Reset Value
)rwa_field_ev_intr_clr_finish                    (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_ev_intr_clr                              ), // [I] Write enable
// Data
  .d          (wdata_ev_intr_clr_finish                    ), // [I] Input data
  .q          (ev_intr_clr_finish                          )  // [O] Output data
);

rwa_field #(
  .TP         (TP                                          ), // [P] Time Propagation
  .DWIDTH     (1                                           ), // [P] Data Width
  .RST_VALUE  (RST_VAL_EV_CTRL_START                       )  // [P] Reset Value
)rwa_field_ev_ctrl_start                         (
// System and Control Interface
  .clk        (clk                                         ), // [I] Clock
  .rst_n      (rst_n                                       ), // [I] Asynchronous Reset - Active low
  .en         (we_ev_ctrl                                  ), // [I] Write enable
// Data
  .d          (wdata_ev_ctrl_start                         ), // [I] Input data
  .q          (ev_ctrl_start                               )  // [O] Output data
);

// Instances for Work registers---------------------------------------------------------------------------------------

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG00                             )  // [P] Reset Value
)rws_field_work_reg00                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg00                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg00                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg00                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg00                            ), // [I] Input data
  .q          (work_reg00                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG01                             )  // [P] Reset Value
)rws_field_work_reg01                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg01                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg01                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg01                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg01                            ), // [I] Input data
  .q          (work_reg01                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG02                             )  // [P] Reset Value
)rws_field_work_reg02                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg02                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg02                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg02                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg02                            ), // [I] Input data
  .q          (work_reg02                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG03                             )  // [P] Reset Value
)rws_field_work_reg03                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg03                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg03                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg03                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg03                            ), // [I] Input data
  .q          (work_reg03                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG04                             )  // [P] Reset Value
)rws_field_work_reg04                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg04                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg04                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg04                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg04                            ), // [I] Input data
  .q          (work_reg04                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG05                             )  // [P] Reset Value
)rws_field_work_reg05                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg05                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg05                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg05                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg05                            ), // [I] Input data
  .q          (work_reg05                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG06                             )  // [P] Reset Value
)rws_field_work_reg06                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg06                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg06                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg06                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg06                            ), // [I] Input data
  .q          (work_reg06                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG07                             )  // [P] Reset Value
)rws_field_work_reg07                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg07                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg07                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg07                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg07                            ), // [I] Input data
  .q          (work_reg07                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG08                             )  // [P] Reset Value
)rws_field_work_reg08                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg08                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg08                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg08                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg08                            ), // [I] Input data
  .q          (work_reg08                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG09                             )  // [P] Reset Value
)rws_field_work_reg09                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg09                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg09                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg09                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg09                            ), // [I] Input data
  .q          (work_reg09                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0A                             )  // [P] Reset Value
)rws_field_work_reg0A                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0A                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0A                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0A                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0A                            ), // [I] Input data
  .q          (work_reg0A                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0B                             )  // [P] Reset Value
)rws_field_work_reg0B                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0B                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0B                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0B                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0B                            ), // [I] Input data
  .q          (work_reg0B                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0C                             )  // [P] Reset Value
)rws_field_work_reg0C                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0C                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0C                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0C                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0C                            ), // [I] Input data
  .q          (work_reg0C                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0D                             )  // [P] Reset Value
)rws_field_work_reg0D                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0D                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0D                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0D                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0D                            ), // [I] Input data
  .q          (work_reg0D                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0E                             )  // [P] Reset Value
)rws_field_work_reg0E                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0E                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0E                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0E                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0E                            ), // [I] Input data
  .q          (work_reg0E                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG0F                             )  // [P] Reset Value
)rws_field_work_reg0F                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg0F                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg0F                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg0F                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg0F                            ), // [I] Input data
  .q          (work_reg0F                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG10                             )  // [P] Reset Value
)rws_field_work_reg10                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg10                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg10                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg10                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg10                            ), // [I] Input data
  .q          (work_reg10                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG11                             )  // [P] Reset Value
)rws_field_work_reg11                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg11                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg11                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg11                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg11                            ), // [I] Input data
  .q          (work_reg11                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG12                             )  // [P] Reset Value
)rws_field_work_reg12                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg12                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg12                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg12                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg12                            ), // [I] Input data
  .q          (work_reg12                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG13                             )  // [P] Reset Value
)rws_field_work_reg13                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg13                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg13                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg13                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg13                            ), // [I] Input data
  .q          (work_reg13                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG14                             )  // [P] Reset Value
)rws_field_work_reg14                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg14                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg14                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg14                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg14                            ), // [I] Input data
  .q          (work_reg14                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG15                             )  // [P] Reset Value
)rws_field_work_reg15                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg15                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg15                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg15                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg15                            ), // [I] Input data
  .q          (work_reg15                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG16                             )  // [P] Reset Value
)rws_field_work_reg16                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg16                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg16                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg16                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg16                            ), // [I] Input data
  .q          (work_reg16                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG17                             )  // [P] Reset Value
)rws_field_work_reg17                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg17                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg17                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg17                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg17                            ), // [I] Input data
  .q          (work_reg17                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG18                             )  // [P] Reset Value
)rws_field_work_reg18                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg18                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg18                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg18                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg18                            ), // [I] Input data
  .q          (work_reg18                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG19                             )  // [P] Reset Value
)rws_field_work_reg19                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg19                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg19                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg19                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg19                            ), // [I] Input data
  .q          (work_reg19                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1A                             )  // [P] Reset Value
)rws_field_work_reg1A                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1A                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1A                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1A                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1A                            ), // [I] Input data
  .q          (work_reg1A                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1B                             )  // [P] Reset Value
)rws_field_work_reg1B                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1B                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1B                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1B                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1B                            ), // [I] Input data
  .q          (work_reg1B                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1C                             )  // [P] Reset Value
)rws_field_work_reg1C                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1C                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1C                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1C                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1C                            ), // [I] Input data
  .q          (work_reg1C                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1D                             )  // [P] Reset Value
)rws_field_work_reg1D                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1D                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1D                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1D                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1D                            ), // [I] Input data
  .q          (work_reg1D                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1E                             )  // [P] Reset Value
)rws_field_work_reg1E                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1E                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1E                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1E                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1E                            ), // [I] Input data
  .q          (work_reg1E                                     )  // [O] Output data
);

rws_field #(
  .TP         (TP                                             ), // [P] Time Propagation
  .DWIDTH     (32                                             ), // [P] Data Width
  .RST_VALUE  (RST_VAL_WORK_REG1F                             )  // [P] Reset Value
)rws_field_work_reg1F                            (
// System and Control Interface
  .clk        (clk                                            ), // [I] Clock
  .rst_n      (rst_n                                          ), // [I] Asynchronous Reset - Active low
  .a_en       (we_work_reg1F                                  ), // [I] Write enable
  .b_en       (ip_we_work_reg1F                               ), // [I] Write enable
// Data
  .a_d        (wdata_work_reg1F                               ), // [I] Input data
  .b_d        (ip_wdata_work_reg1F                            ), // [I] Input data
  .q          (work_reg1F                                     )  // [O] Output data
);


endmodule
